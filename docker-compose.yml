version: '3.8'

services:
  postgres:
    image: postgres:17.6-trixie
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-meeseeks_nuntius}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - meeseeks_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  api:
    build:
      context: .
      dockerfile: api.Dockerfile
      target: production
      args:
        VERSION: ${RELEASE_VERSION:-latest}
        GITHUB_REPO: ${GITHUB_REPO:-cavebatsofware/meeseeks-nuntius}
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-meeseeks_nuntius}
      RUST_LOG: ${RUST_LOG:-info}
      PORT: ${API_PORT:-8080}
    ports:
      - "${API_PORT:-8080}:8080"
    depends_on:
      - postgres
    networks:
      - meeseeks_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
      placement:
        max_replicas_per_node: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  meeseeks_network:
    driver: overlay
    attachable: true